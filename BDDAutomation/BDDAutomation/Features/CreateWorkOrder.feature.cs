// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateWorkOrderFeature : object, Xunit.IClassFixture<CreateWorkOrderFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateWorkOrder.feature"
#line hidden
        
        public CreateWorkOrderFeature(CreateWorkOrderFeature.FixtureData fixtureData, BDDAutomation_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreateWorkOrder", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create a reactive WO for the appropriate ASCM")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateWorkOrder")]
        [Xunit.TraitAttribute("Description", "Create a reactive WO for the appropriate ASCM")]
        [Xunit.TraitAttribute("Category", "tag1")]
        [Xunit.InlineDataAttribute("WPS TEST TEAM", "Work Order Management", "Joe", "Joe Bloggs", "620009", "620009 - Watford Exchange House", "1", "1 - Main Corridor - 620009-018", "MFR", "MFR - MITIE FM Reactive", "Clock", "Clock | HS- Change battery -", "Email", "Email - DWP", new string[0])]
        public void CreateAReactiveWOForTheAppropriateASCM(string username, string menuItem, string reporterFirstPart, string reporter, string postcode, string building, string locationFirstPart, string location, string contractFirstPart, string contract, string problemFirstPart, string problemType, string sourceFirstPart, string source, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tag1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Username", username);
            argumentsOfScenario.Add("MenuItem", menuItem);
            argumentsOfScenario.Add("ReporterFirstPart", reporterFirstPart);
            argumentsOfScenario.Add("Reporter", reporter);
            argumentsOfScenario.Add("Postcode", postcode);
            argumentsOfScenario.Add("Building", building);
            argumentsOfScenario.Add("LocationFirstPart", locationFirstPart);
            argumentsOfScenario.Add("Location", location);
            argumentsOfScenario.Add("ContractFirstPart", contractFirstPart);
            argumentsOfScenario.Add("Contract", contract);
            argumentsOfScenario.Add("ProblemFirstPart", problemFirstPart);
            argumentsOfScenario.Add("ProblemType", problemType);
            argumentsOfScenario.Add("SourceFirstPart", sourceFirstPart);
            argumentsOfScenario.Add("Source", source);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a reactive WO for the appropriate ASCM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I have navigated to the Concept Evolution wesbite", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Then(string.Format("the \"{0}\" enters a email and password on the Signin page", username), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.Then("the user should be signedin to the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.Then(string.Format("the user selects \"{0}\" to create work order", menuItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.Then(string.Format("the user enters \"{0}\"\"{1}\"\"{2}\"\"{3}\"\"{4}\"\"{5}\"\"{6}\"\"{7}\"\"{8}\"\"{9}\"\"{10}\"\"{11}\" in" +
                            "formation", reporterFirstPart, reporter, postcode, building, locationFirstPart, location, contractFirstPart, contract, problemFirstPart, problemType, sourceFirstPart, source), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.Then("the user clicks save and notes the WOID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateWorkOrderFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateWorkOrderFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
